import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

import sys
sys.path.append("../")

import Code.Helper_Methods.tsp_helper as tsp
import Code.Helper_Methods.json_library_helper as jsonlib
import Code.Helper_Methods.tsp_library_helper as tsplib

def load_and_place_image(frame, image_path, width, height):
    # Load the background image
    background_image = tk.PhotoImage(file=image_path)

    # Reduce size of image to 400x200
    if (background_image.width() > 1000) and (width > 0 and height > 0):
        background_image = background_image.subsample(((background_image.width() // width) // 2), ((background_image.height() // height) // 2))


    # Set the resized image as the background
    background_label = ttk.Label(frame, image=background_image)

    # Pack the background label to the frame
    background_label.image = background_image
    background_label.pack(fill="both", expand=True)


class WelcomeWindow:
    def __init__(self, master):
        self.master = master
        master.title("Welcome to My Individual Project")

        # Create a themed frame for the content
        self.frame = ttk.Frame(master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/home_page.png", 400, 300)

        # Label for welcome message
        self.label = ttk.Label(self.frame, text="Welcome to my individual project! \nThis GUI will enable you to visualise the different functionalites of the solutions generated by the algorithms. \nPlease press 'Next' to view the functionalities available.")
        self.label.pack(pady=20)

        # Button for next window
        self.next_button = ttk.Button(self.frame, text="Next", command=self.next_window)
        self.next_button.pack(pady=10)


    def next_window(self):
        self.master.destroy()
        OptionWindow()

class OptionWindow:
    def __init__(self):
        self.master = tk.Tk()
        self.master.title("Choose an Option")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/option_window.png", 400, 300)

        # Label for instruction
        self.label = ttk.Label(self.master, text="Please choose an option:")
        self.label.pack(pady=10)

        # Button for benchmarking graphs
        self.benchmark_button = ttk.Button(self.master, text="Benchmarking Graphs", command=self.open_benchmark_window)
        self.benchmark_button.pack(fill="x", padx=20, pady=5)

        # Button for plotting tour graphs
        self.plot_tour_button = ttk.Button(self.master, text="Plotting Tour Graphs", command=self.open_plot_tour_window)
        self.plot_tour_button.pack(fill="x", padx=20, pady=5)

        # Button for getting tour distances
        self.get_distance_button = ttk.Button(self.master, text="Get Tour Distances With Accuracy", command=self.open_get_distance_window)
        self.get_distance_button.pack(fill="x", padx=20, pady=5)

    def open_benchmark_window(self):
        self.master.destroy()
        AlgorithmWindowForBenchmarking()

    def open_plot_tour_window(self):
        self.master.destroy()
        PlotTourWindow()

    def open_get_distance_window(self):
        self.master.destroy()
        GetDistance()



class AlgorithmWindowForBenchmarking():
    def __init__(self):
        self.master = tk.Tk()
        self.master.title("Benchmarking Algorithm Selection")

         # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/benchmark_window.png", 1, 1)

        self.directory = tsplib.get_tsp_lib_directory()

        # Algorithm selection menu
        self.label = ttk.Label(self.master, text="Please choose an algorithm:")
        self.label.pack(pady=10)

        self.selected_algorithm = tk.StringVar(self.master)
        self.selected_algorithm.set("--Select Algorithm--")

        self.algorithm_menu = ttk.OptionMenu(self.master, self.selected_algorithm, "--Select Algorithm--", "Nearest Neighbour", "Nearest Neighbour Optimisation", "Two Opt", "Large Neighbourhood Search", "Large Neighbourhood Search Convergence", command=self.selected_algorithm_window)
        self.algorithm_menu.pack(pady=10)

        # Frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10)

        # Home button on the bottom right
        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        # Back button on the bottom left
        self.back_button = ttk.Button(button_frame, text="Back", command=self.option_window)
        self.back_button.pack(side="left", padx=10)

    

    def option_window(self):
        self.master.destroy()
        OptionWindow()

    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)

    def benchmark_window(self):
        BenchmarkWindow(self.selection, self.directory)


    def selected_algorithm_window(self, selection):
        self.selection = selection
        self.show_benchmark_button()
    
    def show_benchmark_button(self):
        if hasattr(self, 'benchmark_button'):
            self.benchmark_button.destroy()
            
        self.benchmark_button = ttk.Button(self.master, text="Benchmark", command=self.benchmark_window)
        self.benchmark_button.pack(side="top")



class BenchmarkWindow:
    def __init__(self, selection, directory):
        self.selection = selection  
        self.directory = directory

        self.nodes = []
        self.times = []
        self.algo = ""
        
        self.benchamrk_graph_data()

    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def option_window(self):
        self.master.destroy()
        OptionWindow()

    def algorithm_options_window(self):
        AlgorithmWindowForBenchmarking()

    def benchamrk_graph_data(self):
        # Run the benchmarking function
        self.nodes, self.times, self.algo = tsp.tsp_directory_plot_benchmark_graph(self.directory, self.selection)

        if self.nodes != [] and self.times != [] and self.algo != "":
            self.plot_benchmark_graph()

    def plot_benchmark_graph(self):
        tsp.plot_benchmark_graph(self.nodes, self.times, self.algo, callback=self.show_message_box)


    def show_message_box(self):
        messagebox.showinfo("Benchmarking Complete!", "Benchmarking Complete! Please close this to view the graph.")


class PlotTourWindow:
    def __init__(self):
        self.master = tk.Tk()
        self.master.title("Plotting Tour Graphs")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/plot_tour_graph_home_page.png", 400, 300)

        self.compare_distance_button = ttk.Button(self.frame, text="Compare Tour Graphs", command=self.open_compare_tour_graph_window)
        self.compare_distance_button.pack(side="top", pady=10)

        self.single_distance_button = ttk.Button(self.frame, text="Get Single Tour Graph", command=self.open_single_tour_graph_window)
        self.single_distance_button.pack(side="top", pady=10)

        # Frame for the bottom buttons
        button_frame = ttk.Frame(self.frame)
        button_frame.pack(side="bottom", pady=10)

        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)
    
    def open_single_tour_graph_window(self):
        self.master.destroy()
        SingleTourGraphWindow()

    def open_compare_tour_graph_window(self):
        self.master.destroy()
        CompareTourGraphWindow()

    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def back_window(self):
        self.master.destroy()
        OptionWindow()

class SingleTourGraphWindow:

    def __init__(self):
        self.master = tk.Tk()
        self.open_choose_algorithm_window()


    def open_choose_algorithm_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        self.master.title("Please Choose An Algorithm")

         # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/single_graph.png", 400, 300)

        self.label = ttk.Label(self.master, text="Please choose an algorithm:")
        self.label.pack()

        self.selected_algorithm = tk.StringVar(self.master)
        self.selected_algorithm.set("--Select Algorithm--")

        self.algorithm_menu = ttk.OptionMenu(self.master, self.selected_algorithm, "--Select Algorithm--", "Miller Tucker Zemlin", "Nearest Neighbour", "Nearest Neighbour Optimisation", "Two Opt", "Large Neighbourhood Search", "Large Neighbourhood Search Convergence", command=self.selected_algorithm_window)
        self.algorithm_menu.pack()


        # Frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10)

        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)

    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)

    def back_window(self):
        self.master.destroy()
        PlotTourWindow()

    def selected_algorithm_window(self, selected_algorithm):
        self.selected_algorithm = selected_algorithm
        if selected_algorithm == "Miller Tucker Zemlin":
            self.directory = jsonlib.get_json_files_directory()
            self.open_choose_file_window("JSON")
        else:
            self.directory = tsplib.get_tsp_lib_directory()
            self.open_choose_file_window("TSP")

    def open_choose_file_window(self, file_type):
        self.options = jsonlib.get_json_files_from_directory() if file_type == "JSON" else tsplib.get_tsp_lib_files_from_directory()
        self.options.sort()
        self.selected_file = tk.StringVar(self.master)
        self.selected_file.set("--Select {} File--".format(file_type))

        # Clear the previous file option menu
        if hasattr(self, 'file_option_menu'):
            self.file_option_menu.destroy()
            if hasattr(self, 'plot_tour_graph_button'):
                self.plot_tour_graph_button.destroy()

        self.file_option_menu = ttk.OptionMenu(self.master, self.selected_file, "--Select {} File--".format(file_type), *self.options, command=self.show_plot_tour_graph_button)
        self.file_option_menu.pack()

    def show_plot_tour_graph_button(self, selected_file):
        self.selected_file = selected_file

        # Clear the previous file option menu
        if hasattr(self, 'plot_tour_graph_button'):
            self.plot_tour_graph_button.destroy()
            

        self.plot_tour_graph_button = ttk.Button(self.master, text="Plot Tour Graph", command=self.plot_tour_graph)
        self.plot_tour_graph_button.pack()

    def plot_tour_graph(self):
        if self.selected_algorithm == "Miller Tucker Zemlin":
            tsp.json_file_plot_tour(self.directory + self.selected_file, algorithm=self.selected_algorithm, callback=self.show_message_box)
        else:
            tsp.tsp_file_plot_tour(self.directory + self.selected_file, self.selected_algorithm, callback=self.show_message_box)

    def show_message_box(self):
        messagebox.showinfo("Plotting Complete!", "Plotting Complete! Please close this to view the graph.")


class CompareTourGraphWindow:
    def __init__(self):
        self.master = tk.Tk()
        self.open_compare_tour_graph_window()
    

    def open_compare_tour_graph_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        self.master.title("Compare Tour Graphs")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/compare_graph.png", 400, 300)

        # Create a frame for algorithm selection
        algorithm_frame = ttk.Frame(self.master)
        algorithm_frame.pack(side="top", pady=10, fill="both", expand=True)

        # Add algorithm selection menus
        self.first_algorithm_menu = self.add_choose_algorithm_menu("left", algorithm_frame, "First Algorithm")
        self.second_algorithm_menu = self.add_choose_algorithm_menu("right", algorithm_frame, "Second Algorithm")

        

        # Create a frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10, fill="x")

        # Add the home button to the right side
        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        # Add the back button to the left side
        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)
    
    
    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def back_window(self):
        self.master.destroy()
        PlotTourWindow()

    def add_choose_algorithm_menu(self, side, frame, label_text):
        # Create a subframe for the algorithm menu
        algorithm_frame = ttk.Frame(frame)
        algorithm_frame.pack(side=side, padx=10)

        self.label = ttk.Label(algorithm_frame, text=label_text)
        self.label.pack(side="top", pady=(0, 5))

        # Use the algorithm_frame as the master for OptionMenu
        self.selected_algorithm = tk.StringVar(algorithm_frame)
        self.selected_algorithm.set("--Select Algorithm--")

        # Adjust the width of the OptionMenu to fit the content
        self.algorithm_menu = ttk.OptionMenu(algorithm_frame, self.selected_algorithm, "--Select Algorithm--", "Miller Tucker Zemlin", "Nearest Neighbour", "Nearest Neighbour Optimisation", "Two Opt", "Large Neighbourhood Search", "Large Neighbourhood Search Convergence", command=self.compared_algorithms_selected_window)
        self.algorithm_menu.pack(side="top", fill="x")

        return self.algorithm_menu


    def compared_algorithms_selected_window(self, selected_algorithm):
        if self.first_algorithm_menu["text"] != "--Select Algorithm--" and self.second_algorithm_menu["text"] != "--Select Algorithm--":

            self.first_algorithm = self.first_algorithm_menu["text"]
            if self.first_algorithm == "Miller Tucker Zemlin":
                self.first_directory_files = jsonlib.get_json_files_from_directory()
            else:
                self.first_directory_files = tsplib.get_tsp_lib_files_from_directory()
        

            self.second_algorithm = self.second_algorithm_menu["text"]
            if self.second_algorithm == "Miller Tucker Zemlin":
                self.second_directory_files = jsonlib.get_json_files_from_directory()
            else:
                self.second_directory_files = tsplib.get_tsp_lib_files_from_directory()

            self.similar_files = self.get_similar_files(self.first_directory_files, self.second_directory_files)
            

            self.open_compared_algorithm_choose_file_window()
            # self.open_choose_file_window("JSON")
    

    def get_similar_files(self, first_directory, second_directory):
        return tsp.get_similar_files(first_directory, second_directory)
    

    def open_compared_algorithm_choose_file_window(self):
        self.options = self.similar_files
        self.options.sort()
        self.selected_file = tk.StringVar(self.master)
        self.selected_file.set("--Select File--")

        # Clear the previous file option menu
        if hasattr(self, 'file_option_menu'):
            self.file_option_menu.destroy()
            if hasattr(self, 'get_distance_button'):
                self.get_distance_button.destroy()


        self.file_option_menu = ttk.OptionMenu(self.master, self.selected_file, "--Select File--", *self.options, command=self.show_compared_algorithm_plot_tour_graph_button)
        self.file_option_menu.pack()


    def show_compared_algorithm_plot_tour_graph_button(self, selected_file):
        self.selected_file = selected_file

        # Clear the previous file option menu
        if hasattr(self, 'get_distance_button'):
            self.get_distance_button.destroy()
            

        self.get_distance_button = ttk.Button(self.master, text="Plot Tour Graphs", command=self.get_compared_tour_graph)
        self.get_distance_button.pack()
    

    def get_compared_tour_graph(self):

        self.first_algorithm_file_type = ".json" if self.first_algorithm == "Miller Tucker Zemlin" else ".tsp"
        self.first_directory = jsonlib.get_json_files_directory() if self.first_algorithm == "Miller Tucker Zemlin" else tsplib.get_tsp_lib_directory()

        self.second_algorithm_file_type = ".json" if self.second_algorithm == "Miller Tucker Zemlin" else ".tsp"
        self.second_directory = jsonlib.get_json_files_directory() if self.second_algorithm == "Miller Tucker Zemlin" else tsplib.get_tsp_lib_directory()

        self.plot_compared_tour_graph(self.first_directory + self.selected_file + self.first_algorithm_file_type, self.first_algorithm, self.second_directory + self.selected_file + self.second_algorithm_file_type, self.second_algorithm)

        
    def plot_compared_tour_graph(self, first_file, first_algorithm, second_file, second_algorithm):
        tsp.plot_two_graphs_compared_to_each_other(first_file, first_algorithm, second_file, second_algorithm, callback=self.show_compared_message_box)

    
    def show_compared_message_box(self):
        messagebox.showinfo("Plotting Complete!", "Graphs Plotted! Please close this to view the graphs.")
    

class GetDistance:
    def __init__(self):
        self.master = tk.Tk()
        self.master.title("Getting Tour Distances")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/distance_home_page.png", 400, 300)

        self.compare_distance_button = ttk.Button(self.master, text="Compare Distances", command=self.open_compare_distance_window)
        self.compare_distance_button.pack(side="top", pady=10)

        self.single_distance_button = ttk.Button(self.master, text="Get Single Distance", command=self.open_choose_algorithm_window)
        self.single_distance_button.pack(side="top", pady=10)

        # Frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10)

        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)
    
    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def back_window(self):
        self.master.destroy()
        OptionWindow()
    
    def open_compare_distance_window(self):
        self.master.destroy()
        CompareDistanceWindow()

    def open_choose_algorithm_window(self):
        self.master.destroy()
        SingleDistanceWindow()
    

class SingleDistanceWindow:
    def __init__(self):
        self.master = tk.Tk()
        self.open_choose_algorithm_window()

    def open_choose_algorithm_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        self.master.title("Please Choose An Algorithm")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/single_distance.png", 400, 300)

        self.label = ttk.Label(self.master, text="Please choose an algorithm:")
        self.label.pack()

        self.selected_algorithm = tk.StringVar(self.master)
        self.selected_algorithm.set("--Select Algorithm--")

        self.algorithm_menu = ttk.OptionMenu(self.master, self.selected_algorithm, "--Select Algorithm--", "Miller Tucker Zemlin", "Nearest Neighbour", "Nearest Neighbour Optimisation", "Two Opt", "Large Neighbourhood Search", "Large Neighbourhood Search Convergence", command=self.selected_algorithm_window)
        self.algorithm_menu.pack()


        # Frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10)

        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)

    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def back_window(self):
        self.master.destroy()
        GetDistance()
        

    def selected_algorithm_window(self, selected_algorithm):
        self.selected_algorithm = selected_algorithm
        if selected_algorithm == "Miller Tucker Zemlin":
            self.directory = jsonlib.get_json_files_directory()
            self.open_choose_file_window("JSON")
        else:
            self.directory = tsplib.get_tsp_lib_directory()
            self.open_choose_file_window("TSP")
    
    def open_choose_file_window(self, file_type):
        self.options = jsonlib.get_json_files_from_directory() if file_type == "JSON" else tsplib.get_tsp_lib_files_from_directory()
        self.options.sort()
        self.selected_file = tk.StringVar(self.master)
        self.selected_file.set("--Select {} File--".format(file_type))

        # Clear the previous file option menu
        if hasattr(self, 'file_option_menu'):
            self.file_option_menu.destroy()
            if hasattr(self, 'get_distance_button'):
                self.get_distance_button.destroy()

        self.file_option_menu = ttk.OptionMenu(self.master, self.selected_file, "--Select {} File--".format(file_type), *self.options, command=self.show_get_distance_button)
        self.file_option_menu.pack()
    
    def show_get_distance_button(self, selected_file):
        self.selected_file = selected_file

        # Clear the previous file option menu
        if hasattr(self, 'get_distance_button'):
            self.get_distance_button.destroy()
            

        self.get_distance_button = ttk.Button(self.master, text="Get Distance", command=self.get_distance)
        self.get_distance_button.pack()
    
    def get_distance(self):
        if self.selected_algorithm == "Miller Tucker Zemlin":
            self.distance, self.accuracy = tsp.single_json_file_tour_edges_total_distance(self.directory + self.selected_file, algorithm=self.selected_algorithm)
            self.show_message_box()
        else:
            self.distance, self.accuracy = tsp.single_tsp_file_tour_edges_total_distance(self.directory + self.selected_file, self.selected_algorithm)
            self.show_message_box()
        
    def show_message_box(self):
        messagebox.showinfo("Distance Calculated!", "Distance Calculated! \n\n Distance: " + str(self.distance) + ".\n" + "Accuracy Gap(Lower Score = Greater Accuracy): " + str(self.accuracy) + "%")



class CompareDistanceWindow:
    def __init__(self):
        self.open_compare_distance_window()
    

    def open_compare_distance_window(self):
        self.master = tk.Tk()
        self.master.title("Compare Distances")

        # Create a themed frame for the content
        self.frame = ttk.Frame(self.master)
        self.frame.pack(fill="both", expand=True)

        # Load the background image
        load_and_place_image(self.frame, "Run_Code/GUI/compare_distance.png", 300, 225)

        # Create a frame for algorithm selection
        algorithm_frame = ttk.Frame(self.master)
        algorithm_frame.pack(side="top", pady=10, fill="both", expand=True)

        # Add algorithm selection menus
        self.first_algorithm_menu = self.add_choose_algorithm_menu("left", algorithm_frame, "First Algorithm")
        self.second_algorithm_menu = self.add_choose_algorithm_menu("right", algorithm_frame, "Second Algorithm")

        

        # Create a frame for the bottom buttons
        button_frame = ttk.Frame(self.master)
        button_frame.pack(side="bottom", pady=10, fill="x")

        # Add the home button to the right side
        self.home_button = ttk.Button(button_frame, text="Home", command=self.home_window)
        self.home_button.pack(side="right", padx=10)

        # Add the back button to the left side
        self.back_button = ttk.Button(button_frame, text="Back", command=self.back_window)
        self.back_button.pack(side="left", padx=10)

    
    def home_window(self):
        self.master.destroy()
        self.master = tk.Tk()
        WelcomeWindow(self.master)
    
    def back_window(self):
        self.master.destroy()
        GetDistance()

    def add_choose_algorithm_menu(self, side, frame, label_text):
        # Create a subframe for the algorithm menu
        algorithm_frame = ttk.Frame(frame)
        algorithm_frame.pack(side=side, padx=10)

        self.label = ttk.Label(algorithm_frame, text=label_text)
        self.label.pack(side="top", pady=(0, 5))

        # Use the algorithm_frame as the master for OptionMenu
        self.selected_algorithm = tk.StringVar(algorithm_frame)
        self.selected_algorithm.set("--Select Algorithm--")

        # Adjust the width of the OptionMenu to fit the content
        self.algorithm_menu = ttk.OptionMenu(algorithm_frame, self.selected_algorithm, "--Select Algorithm--", "Miller Tucker Zemlin", "Nearest Neighbour", "Nearest Neighbour Optimisation", "Two Opt", "Large Neighbourhood Search", "Large Neighbourhood Search Convergence", command=self.compared_algorithms_selected_window)
        self.algorithm_menu.pack(side="top", fill="x")

        # Return the OptionMenu for further reference if needed
        return self.algorithm_menu
    

    def compared_algorithms_selected_window(self, selected_algorithm):
        if self.first_algorithm_menu["text"] != "--Select Algorithm--" and self.second_algorithm_menu["text"] != "--Select Algorithm--":

            self.first_algorithm = self.first_algorithm_menu["text"]
            if self.first_algorithm == "Miller Tucker Zemlin":
                self.first_directory_files = jsonlib.get_json_files_from_directory()
            else:
                self.first_directory_files = tsplib.get_tsp_lib_files_from_directory()
        

            self.second_algorithm = self.second_algorithm_menu["text"]
            if self.second_algorithm == "Miller Tucker Zemlin":
                self.second_directory_files = jsonlib.get_json_files_from_directory()
            else:
                self.second_directory_files = tsplib.get_tsp_lib_files_from_directory()

            self.similar_files = self.get_similar_files(self.first_directory_files, self.second_directory_files)
            

            self.open_compared_algorithm_choose_file_window()
            # self.open_choose_file_window("JSON")
    

    def get_similar_files(self, first_directory, second_directory):
        return tsp.get_similar_files(first_directory, second_directory)
    

    def open_compared_algorithm_choose_file_window(self):
        self.options = self.similar_files
        self.options.sort()
        self.selected_file = tk.StringVar(self.master)
        self.selected_file.set("--Select File--")

        # Clear the previous file option menu
        if hasattr(self, 'file_option_menu'):
            self.file_option_menu.destroy()
            if hasattr(self, 'get_distance_button'):
                self.get_distance_button.destroy()

        self.file_option_menu = ttk.OptionMenu(self.master, self.selected_file, "--Select File--", *self.options, command=self.show_compared_algorithm_get_distance_button)
        self.file_option_menu.pack()


    def show_compared_algorithm_get_distance_button(self, selected_file):
        self.selected_file = selected_file

        # Clear the previous file option menu
        if hasattr(self, 'get_distance_button'):
            self.get_distance_button.destroy()
            

        self.get_distance_button = ttk.Button(self.master, text="Get Compared Distance", command=self.get_compared_distance)
        self.get_distance_button.pack()
    

    def get_compared_distance(self):
        if self.first_algorithm == "Miller Tucker Zemlin":
            first_algorithm_file_type = ".json"
            self.first_directory = jsonlib.get_json_files_directory()
            first_distance, first_accuracy = tsp.single_json_file_tour_edges_total_distance(self.first_directory + self.selected_file + first_algorithm_file_type, algorithm=self.first_algorithm)
        else:
            first_algorithm_file_type = ".tsp"
            self.first_directory = tsplib.get_tsp_lib_directory()
            first_distance, first_accuracy = tsp.single_tsp_file_tour_edges_total_distance(self.first_directory + self.selected_file + first_algorithm_file_type, self.first_algorithm)
        
        if self.second_algorithm == "Miller Tucker Zemlin":
            second_algorithm_file_type = ".json"
            self.second_directory = jsonlib.get_json_files_directory()
            second_distance, second_accuracy = tsp.single_json_file_tour_edges_total_distance(self.second_directory + self.selected_file + second_algorithm_file_type, algorithm=self.second_algorithm)
        else:
            second_algorithm_file_type = ".tsp"
            self.second_directory = tsplib.get_tsp_lib_directory()
            second_distance, second_accuracy = tsp.single_tsp_file_tour_edges_total_distance(self.second_directory + self.selected_file + second_algorithm_file_type, self.second_algorithm)

        self.show_compared_message_box(first_distance, first_accuracy, second_distance, second_accuracy)
    

    def show_compared_message_box(self, first_distance, first_accuracy, second_distance, second_accuracy):
        messagebox.showinfo("Distance Calculated!", "Distance Calculated! Here are the distances and accuracies: \n\n" + str(self.first_algorithm) + ":\n Distance: "  + str(first_distance) + "\n Accuracy Gap(Lower Score = Greater Accuracy): "  + str(first_accuracy) + "\n\n" + str(self.second_algorithm) + ":\n Distance: " + str(second_distance) + "\n Accuracy Gap(Lower Score = Greater Accuracy): " + str(second_accuracy))
    

if __name__ == "__main__":
    root = tk.Tk()
    welcome = WelcomeWindow(root)
    root.mainloop()











 # def miller_tucker_zemlin_benchmark_options(self):
    #     self.master.destroy()
    #     self.master = tk.Tk()
    #     self.master.title("Miller Tucker Zemlin")

    #     # Labels and Entry Widgets
    #     tk.Label(self.master, text="Please choose a time limit, minimum gap and tee value:").grid(row=0, column=0, columnspan=2, pady=10)

    #     tk.Label(self.master, text="Time Limit:").grid(row=1, column=0, padx=10)
    #     self.time_limit = tk.Entry(self.master)
    #     self.time_limit.grid(row=1, column=1, padx=10, pady=5)

    #     tk.Label(self.master, text="Minimum Gap:").grid(row=2, column=0, padx=10)
    #     self.min_gap = tk.Entry(self.master)
    #     self.min_gap.grid(row=2, column=1, padx=10, pady=5)

    #     tk.Label(self.master, text="Tee Value:").grid(row=3, column=0, padx=10)
    #     self.tee_value = tk.Entry(self.master)
    #     self.tee_value.grid(row=3, column=1, padx=10, pady=5)

    #     # Submit Button
    #     self.submit_button = tk.Button(self.master, text="Benchmark", command=self.mtz_benchmark_graph)
    #     self.submit_button.grid(row=4, column=0, columnspan=2, pady=10)
    
    # def get_mtz_values(self):
    #     chosen_time_limit = self.time_limit.get()
    #     chosen_min_gap = self.min_gap.get()
    #     tee_value = self.tee_value.get()
    #     return chosen_time_limit, chosen_min_gap, tee_value
    
    # def mtz_benchmark_graph(self):
    #     chosen_time_limit, chosen_min_gap, tee_value = self.get_mtz_values()
    #     tsp.json_directory_plot_benchmark_graph(self.directory, chosen_time_limit, chosen_min_gap, tee_value, self.selection)

    # def display_elapsed_time(self):

    #     elapsed_time = round(time.time() - self.current_time, 2)
    #     self.time_label.config(text="Total Time Taken: "+ str(elapsed_time) + " seconds(s)")
    #     self.master.after(1000, self.display_elapsed_time)